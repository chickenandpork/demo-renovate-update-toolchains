load(":yq_toolchain.bzl", "yq_toolchain")  # load the rule()
load("@versions_yq//:json.bzl", "YQ")  # generated in WORKSPACE from attachments.json

# define a specific type to trigger type-checking
toolchain_type(
    name = "toolchain_type",
    visibility = ["//visibility:public"],
)

[
    yq_toolchain(
        name = "{}".format(k),

        # tool matches the `bazel run @yq_darwin_amd64//:yq -- --version` binary noted above in
        # (WORKSPACE) `http_archive( name = "yq_darwin_amd64", ...)` with `alias( name="yq", ...)`
        # in `build_file_content`.  Note that the alias in that content both maps the consistent `:yq`
        # to the `:yq_darwin_amd64` arch-specific binary in each tarball archive, but also opens up
        # visibility
        tool = "@{}//:yq".format(k),
        visibility = ["//visibility:public"],
    )
    for k, v in YQ.items()
]

# With https://github.com/bazelbuild/platforms/pull/67 it seems that Bazel direction seems to flop
# back to "aarch64" and "x86_64" rather than the more consistent "amd64" and "arm64"

[
    toolchain(
        name = "{}_toolchain".format(k),
        exec_compatible_with = [
            "@platforms//os:{}".format(v["os"]),
            "@platforms//cpu:{}".format(v["cpu"]),
        ],
        target_compatible_with = [
            "@platforms//os:{}".format(v["os"]),
            "@platforms//cpu:{}".format(v["cpu"]),
        ],
        toolchain = ":{}".format(k),  # yq_toolchain(name=k) matches YQ.keys()
        toolchain_type = ":toolchain_type",  # `toolchain_type(...)` above
    )
    for k, v in YQ.items()
]
