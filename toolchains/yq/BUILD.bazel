load(":yq_toolchain.bzl", "yq_toolchain")  # load the rule()

# define a specific type to trigger type-checking
toolchain_type(
    name = "toolchain_type",
    visibility = ["//visibility:public"],
)

yq_toolchain(
    name = "yq_darwin_amd64",  # local scope doesn't clash with @yq_darwin_amd64

    # tool matches the `bazel run @yq_darwin_amd64//:yq -- --version` binary noted above in
    # (WORKSPACE) `http_archive( name = "yq_darwin_amd64", ...)` with `alias( name="yq", ...)`
    # in `build_file_content`.  Note that the alias in that content both maps the consistent `:yq`
    # to the `:yq_darwin_amd64` arch-specific binary in each tarball archive, but also opens up
    # visibility
    tool = "@yq_darwin_amd64//:yq",
    visibility = ["//visibility:public"],
)

toolchain(
    name = "yq_darwin_amd64_toolchain",
    exec_compatible_with = [
        "@platforms//os:osx",  # yep, "osx" not "darwin"
        "@platforms//cpu:x86_64",  # yep, "x86_64" not "amd64"
    ],
    target_compatible_with = [
        "@platforms//os:osx",
        "@platforms//cpu:x86_64",
    ],

    # matches `yq_toolchain( name = "yq_darwin_amd64", ...` in this file
    toolchain = ":yq_darwin_amd64",
    toolchain_type = ":toolchain_type",  # `toolchain_type(...)` above
)
